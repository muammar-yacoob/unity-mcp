name: Release and Publish

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  release-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug - Show commit messages and check triggers
        run: |
          echo "=== WORKFLOW TRIGGER DEBUG ==="
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Repository: ${{ github.repository }}"
          echo ""
          echo "=== COMMITS JSON ==="
          echo '${{ toJSON(github.event.commits) }}'
          echo ""
          echo "=== RECENT COMMITS ==="
          git log --oneline -10
          echo ""
          echo "=== LAST COMMIT MESSAGE ==="
          LAST_MSG=$(git log -1 --pretty=format:"%s")
          echo "Message: $LAST_MSG"
          echo ""
          echo "=== CHECKING CONVENTIONAL COMMIT PATTERNS ==="
          if [[ "$LAST_MSG" =~ ^feat: ]]; then
            echo "✅ Found feat: commit - should trigger release"
          elif [[ "$LAST_MSG" =~ ^fix: ]]; then
            echo "✅ Found fix: commit - should trigger release"
          elif [[ "$LAST_MSG" =~ ^perf: ]]; then
            echo "✅ Found perf: commit - should trigger release"
          elif [[ "$LAST_MSG" == *"BREAKING CHANGE"* ]]; then
            echo "✅ Found BREAKING CHANGE - should trigger release"
          else
            echo "❌ No conventional commit pattern found - would skip release"
          fi

      - name: Check workflow file syntax
        run: |
          echo "=== WORKFLOW FILE CHECK ==="
          if [ -f ".github/workflows/release-publish.yml" ]; then
            echo "✅ Workflow file exists"
            echo "File size: $(wc -c < .github/workflows/release-publish.yml) bytes"
          else
            echo "❌ Workflow file missing"
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          registry-url: "https://registry.npmjs.org"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Install dependencies
        run: |
          echo "=== INSTALLING DEPENDENCIES ==="
          cd packages/mcp-server
          npm install
          echo "=== PACKAGE.JSON DEBUG ==="
          cat package.json | jq '.name, .version, .scripts'

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config pull.rebase false

      - name: Build project
        run: |
          echo "=== BUILDING PROJECT ==="
          cd packages/mcp-server
          npm run build
          echo "=== BUILD OUTPUT ==="
          ls -la dist/

      - name: Debug - Check semantic-release config
        run: |
          echo "=== SEMANTIC-RELEASE CONFIG ==="
          cat .releaserc.json
          echo "=== CHECKING IF RELEASE SHOULD TRIGGER ==="
          cd packages/mcp-server
          npx semantic-release --dry-run --debug

      - name: Run semantic-release
        id: semantic-release
        working-directory: packages/mcp-server
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          DEBUG: semantic-release:*
        run: |
          echo "=== RUNNING SEMANTIC-RELEASE ==="
          npx semantic-release --debug

      - name: Create Distribution Package
        if: steps.semantic-release.outputs.new_release_published == 'true'
        run: |
          # Create distribution directory
          mkdir -p dist-package
          
          # Copy essential files
          cp package.json dist-package/
          cp README.md dist-package/ 2>/dev/null || true
          cp LICENSE dist-package/ 2>/dev/null || true
          
          # Copy built distribution files
          find . -name "dist" -type d -exec cp -r {} dist-package/ \;
          
          # Update package.json version if new release
          VERSION="${{ steps.semantic-release.outputs.new_release_version }}"
          if [ ! -z "$VERSION" ]; then
            cd dist-package
            npm version "$VERSION" --no-git-tag-version
            cd ..
          fi

      - name: Create Release Archive
        if: steps.semantic-release.outputs.new_release_published == 'true'
        run: |
          cd dist-package
          tar -czf ../unity-mcp-${{ steps.semantic-release.outputs.new_release_version }}.tar.gz *
          cd .. 